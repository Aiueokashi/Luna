
    async run(message, args) {

        const client  = this.client,
              url     = args[0];

        const player = message.guild.player

        // —— Verifies if the user is connected to a voice channel
        if (!message.member.voice.channel)
            return message.channel.send("Glossary.NotInChan")

        player.connection = await message.member.voice.channel.join()
            .catch(err => { return super.respond("Unable to join voice channel") })

        if (validUrl.test(url)) {

            console.log("playlist");

            // —— If the URL passed matches that of a playlist
            if (url.match(/^(?!.*\?.*\bv=)https:\/\/www\.youtube\.com\/.*\?.*\blist=.*$/)) {

                const playlist = await ytpl(url).catch(err => err)

                if (playlist instanceof Error)
                    return super.respond("— Playlist error")

                const { items } = playlist

                for (let i = 0; i < items.length; i++) {
                    player.queue.push(
                        {
                            "id" : items[i].id,
                            "url": items[i].url_simple,
                            "title": items[i].title,
                            "thumbnail": items[i].thumbnail,
                            "duration": items[i].duration,
                            "author": {
                              "name": items[i].author.name,
                              "ref": items[i].author.ref
                            }
                        }
                    )
                }
            }

        } else {

        }

        if (!player.dispatcher) {
            this.play(player, message)
        }


    }

    destroy(player) {
        player.queue      = []
        player.connection = null
        player.dispatcher = null
        player.isPlaying  = false
        player.embed      = {}
    }

    play(player) {

        player.embed = Object.entries(player.embed).length === 0
            && this.createPlayer(player)

        let stream = ytdl(player.queue[0].url, {
            filter: "audioonly",
            opusEncoded: true,
            highWaterMark: 1 << 25
        });

        player.dispatcher = player.connection.play(stream, {
            type: 'opus',
            bitrate: 'auto'
        })

        player.dispatcher.on('start', () => {

        })

        player.dispatcher.on('finish', () => this.finish())

    }

    finish(player) {
        console.log("finish");
    }

    createPlayer(player) {

        let vType = player.queue[0].duration === null ? "live" : player.queue[0].duration

        const progress = Array.from({length: (50 - (vType + 1))}, () => "─")

        player.embed = { embed : {

            title  : player.queue[0].title,
            url    : player.queue[0].url,
            author : {
                name : player.queue[0].author.name,
                url  : player.queue[0].author.ref
            },
            description :
                `\`\`\`00:00 ${progress.join("")} ${vType}\`\`\``

        }}

        super.respond(player.embed)

    }

}

module.exports = Play